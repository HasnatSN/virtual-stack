"""consolidate_iam_schema_to_match_models

Revision ID: e6e7770f7d95
Revises: b8f3acf95fa5
Create Date: 2025-05-22 09:16:23.257924

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'e6e7770f7d95'
down_revision: Union[str, None] = 'manual_add_scope_column'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop old tables in correct order to respect foreign key constraints
    # 1. Drop 'user_tenant_roles' (old version) as it depends on 'users', 'tenants', and 'tenant_roles'
    op.drop_table('user_tenant_roles', schema='iam')
    
    # 2. Drop 'tenant_role_permissions' as it depends on 'tenant_roles' and 'permissions'
    op.drop_table('tenant_role_permissions', schema='iam')
    
    # 3. Drop 'tenant_roles' (the old roles table) as it depends on 'tenants'
    op.drop_table('tenant_roles', schema='iam')

    # Create new 'roles' table
    op.create_table('roles',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), primary_key=True, nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('is_system_role', sa.Boolean(), server_default=sa.false(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
        sa.ForeignKeyConstraint(['tenant_id'], ['iam.tenants.id'], name=op.f('fk_roles_tenant_id_tenants'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
        schema='iam'
    )
    op.create_index(op.f('ix_roles_tenant_id'), 'roles', ['tenant_id'], unique=False, schema='iam')

    # Create new 'user_tenant_roles' table
    op.create_table('user_tenant_roles',
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.ForeignKeyConstraint(['role_id'], ['iam.roles.id'], name=op.f('fk_user_tenant_roles_role_id_roles'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['tenant_id'], ['iam.tenants.id'], name=op.f('fk_user_tenant_roles_tenant_id_tenants'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['iam.users.id'], name=op.f('fk_user_tenant_roles_user_id_users'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_id', 'role_id', 'tenant_id', name=op.f('pk_user_tenant_roles')),
        sa.UniqueConstraint('user_id', 'role_id', 'tenant_id', name='uq_user_role_tenant'),
        schema='iam'
    )

    # Create new 'role_permissions' table
    op.create_table('role_permissions',
        sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('permission_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['permission_id'], ['iam.permissions.id'], name=op.f('fk_role_permissions_permission_id_permissions'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['role_id'], ['iam.roles.id'], name=op.f('fk_role_permissions_role_id_roles'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('role_id', 'permission_id', name=op.f('pk_role_permissions')),
        sa.UniqueConstraint('role_id', 'permission_id', name='uq_role_permission'),
        schema='iam'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop new tables in reverse order of creation
    op.drop_table('role_permissions', schema='iam')
    op.drop_table('user_tenant_roles', schema='iam')
    op.drop_index(op.f('ix_roles_tenant_id'), table_name='roles', schema='iam')
    op.drop_table('roles', schema='iam')

    # Recreate 'tenant_roles' table (structure from 20240330_create_iam_tables.py)
    op.create_table(
        "tenant_roles",
        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_system_role", sa.Boolean(), nullable=False, server_default=sa.false()),
        sa.Column(
            "tenant_id",
            postgresql.UUID(as_uuid=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(['tenant_id'], ['iam.tenants.id'], name='fk_tenant_roles_tenant_id_tenants_old', ondelete="CASCADE"),
        sa.UniqueConstraint("tenant_id", "name", name="uq_tenant_role_name_old"),
        schema="iam",
    )
    op.create_index("ix_tenant_role_name_old", "tenant_roles", ["name"], unique=False, schema="iam")


    # Recreate 'tenant_role_permissions' table (structure from 20240330_create_iam_tables.py)
    op.create_table(
        "tenant_role_permissions",
        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "tenant_role_id",
            postgresql.UUID(as_uuid=True),
            nullable=False,
        ),
        sa.Column(
            "permission_id",
            postgresql.UUID(as_uuid=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(['tenant_role_id'], ['iam.tenant_roles.id'], name='fk_tenant_role_permissions_tenant_role_id_tenant_roles_old', ondelete="CASCADE"),
        sa.ForeignKeyConstraint(['permission_id'], ['iam.permissions.id'], name='fk_tenant_role_permissions_permission_id_permissions_old', ondelete="CASCADE"),
        sa.UniqueConstraint("tenant_role_id", "permission_id", name="uq_tenant_role_permission_old"),
        schema="iam",
    )

    # Recreate 'user_tenant_roles' (old version, structure from 20240330_create_iam_tables.py)
    op.create_table(
        "user_tenant_roles",
        sa.Column("id", postgresql.UUID(as_uuid=True), primary_key=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "user_id",
            postgresql.UUID(as_uuid=True),
            nullable=False,
        ),
        sa.Column(
            "tenant_id",
            postgresql.UUID(as_uuid=True),
            nullable=False,
        ),
        sa.Column(
            "tenant_role_id", 
            postgresql.UUID(as_uuid=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(['user_id'], ['iam.users.id'], name='fk_user_tenant_roles_user_id_users_old', ondelete="CASCADE"),
        sa.ForeignKeyConstraint(['tenant_id'], ['iam.tenants.id'], name='fk_user_tenant_roles_tenant_id_tenants_old', ondelete="CASCADE"),
        sa.ForeignKeyConstraint(['tenant_role_id'], ['iam.tenant_roles.id'], name='fk_user_tenant_roles_tenant_role_id_tenant_roles_old', ondelete="CASCADE"),
        sa.UniqueConstraint("user_id", "tenant_id", "tenant_role_id", name="uq_user_tenant_role_old"),
        schema="iam",
    )
    # ### end Alembic commands ###
