---
description: 
globs: 
alwaysApply: true
---
rules:
  - name: "Project Structure"
    description: "Ensure files follow the correct project structure."
    pattern: "virtualstack-backend/**"
    requirements:
      - "All code must be inside the appropriate domain-specific subdirectories (e.g., iam, compute, billing)."
      - "Place domain logic in service layer, not in API endpoints."
      - "Keep API endpoints focused on request/response handling only."
      - "Ensure models, schemas, and services follow consistent domain organization."

  - name: "Naming Conventions"
    description: "Enforce naming conventions for variables, functions, classes, and database entities."
    pattern: "**/*.py"
    requirements:
      - "Use snake_case for variables, functions, methods, modules, and package names."
      - "Use PascalCase for class names and type variables."
      - "Use UPPER_CASE for constants."
      - "Use plural nouns for directories containing multiple modules (e.g., models/, schemas/, services/)."
      - "Use singular nouns for specific modules (e.g., user.py, tenant.py)."
      - "Ensure database table names are snake_case and plural."
      - "Ensure primary keys follow <table_name_singular>_id pattern (e.g., user_id, tenant_id)."
      - "Service method names should be action-oriented (e.g., create_user, get_users_by_tenant)."
      - "API endpoint function names should match HTTP method (e.g., create_user for POST, update_user for PUT)."

  - name: "Import Organization"
    description: "Maintain proper import structure."
    pattern: "**/*.py"
    requirements:
      - "Group imports in this order: standard library, third-party libraries, local application imports."
      - "Separate each group with a single blank line."
      - "Sort imports alphabetically within each group."
      - "Avoid wildcard imports (from module import *)."
      - "Use absolute imports for application modules."
      - "Use relative imports only for modules in the same package."

  - name: "Type Hints"
    description: "Enforce the use of Python type hints."
    pattern: "**/*.py"
    requirements:
      - "All function parameters and return values must have type hints."
      - "Use Optional[Type] for nullable values."
      - "Use Union[Type1, Type2] where multiple types are allowed."
      - "Use TypeVar for generic functions."
      - "Use Protocol for duck typing."
      - "Use Literal for restricted string values."
      - "Define custom types for complex structures."
      - "Use proper SQLAlchemy types in model definitions."

  - name: "API Routes"
    description: "Ensure API route naming consistency."
    pattern: "**/api/v1/endpoints/*.py"
    requirements:
      - "Use kebab-case for URL paths."
      - "Use plural nouns for resource collections."
      - "Use nested paths for sub-resources."
      - "Ensure all endpoints have appropriate response models and status codes."
      - "Document endpoint parameters with clear descriptions."
      - "Return consistent error responses across endpoints."
      - "Implement proper validation using Pydantic models."
      - "Use appropriate HTTP status codes (201 for creation, 204 for deletion, etc.)."
      - "Always validate entity existence before performing operations."
      - "Sequence validation properly: entity existence → permission check → business logic."

  - name: "Database Transactions"
    description: "Ensure proper database transaction handling."
    pattern: "**/services/**/*.py"
    requirements:
      - "Group related database operations within a single service method."
      - "Use db.add(obj), await db.commit(), and await db.refresh(obj) where needed."
      - "Ensure db.rollback() is used in error handling when necessary."
      - "Always refresh objects after server-generated values like created_at."
      - "Use explicit transaction boundaries for multi-step operations."
      - "Handle potential database deadlocks with retry logic."
      - "Avoid N+1 query problems by using proper joins and eager loading."
      - "Validate data before committing transactions."
      - "Ensure proper cleanup in error scenarios."

  - name: "Logging"
    description: "Ensure structured logging practices."
    pattern: "**/*.py"
    requirements:
      - "Use Python's logging module for all logs."
      - "Include relevant context like tenant_id, user_id, and resource_id in logs."
      - "Avoid using print statements for debugging."
      - "Use appropriate log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL)."
      - "Log the beginning and completion of critical operations."
      - "Include correlation IDs in logs for request tracing."
      - "Ensure sensitive data is not logged (passwords, keys, tokens)."
      - "Structure log messages for easy parsing and analysis."
      - "Log exceptions with full stack traces at appropriate levels."

  - name: "Testing"
    description: "Ensure test coverage and structure."
    pattern: "tests/**/*.py"
    requirements:
      - "Use pytest and unittest.mock for unit tests."
      - "Write integration tests using fastapi.testclient.TestClient."
      - "Ensure critical paths and business logic are covered."
      - "Use fixtures for common test resources."
      - "Implement test database isolation to prevent test interference."
      - "Test both success and error scenarios for API endpoints."
      - "Use parameterized tests for multiple input variations."
      - "Mock external dependencies consistently."
      - "Ensure test database schema matches development schema."
      - "Test transaction rollback behavior on errors."
      - "Use proper assertion messages for better test diagnostics."
      - "Maintain at least 80% code coverage."
      - "Focus on testing business logic rather than framework features."

  - name: "Security Best Practices"
    description: "Enforce security measures in code."
    pattern: "**/*.py"
    requirements:
      - "Never store raw passwords or API keys in the code."
      - "Use parameterized queries to prevent SQL injection."
      - "Validate and sanitize all external input with Pydantic."
      - "Implement and configure CORS securely."
      - "Use environment-based authentication for internal services."
      - "Implement proper role-based access control."
      - "Ensure tenant isolation in multi-tenant operations."
      - "Use secure password hashing with appropriate algorithms."
      - "Implement proper token management (expiry, refresh, revocation)."
      - "Validate tenant context in permission checks."
      - "Implement rate limiting for sensitive endpoints."
      - "Use secure headers in API responses."
      - "Follow the principle of least privilege for database operations."

  - name: "Configuration Management"
    description: "Ensure proper use of configuration settings."
    pattern: "**/core/config.py"
    requirements:
      - "All configuration must be managed via environment variables."
      - "Use pydantic-settings to load and validate settings."
      - "Define settings with clear types and sensible defaults where possible."
      - "Separate development, testing, and production configurations."
      - "Document all configuration options."
      - "Use secret management for sensitive configuration."
      - "Implement validation for critical configuration values."
      - "Centralize configuration access through a single module."
      - "Provide clear error messages for missing or invalid configuration."

  - name: "Alembic Migrations"
    description: "Ensure proper database migration practices."
    pattern: "alembic/**/*.py"
    requirements:
      - "Create separate migration files for schema changes and data migrations."
      - "Ensure migrations are idempotent when possible."
      - "Test migrations in isolation before applying to shared environments."
      - "Include meaningful commit messages in migration files."
      - "Use appropriate operation granularity (don't mix unrelated changes)."
      - "Ensure backward compatibility for rolling back changes."
      - "Document complex migrations with clear comments."
      - "Explicitly refresh objects after auto-generate to ensure all fields are loaded."
      - "Include downgrade logic for all migrations."
      - "Test both upgrade and downgrade paths."

  - name: "Error Handling"
    description: "Implement consistent error handling patterns."
    pattern: "**/*.py"
    requirements:
      - "Use custom exception classes for domain-specific errors."
      - "Convert internal exceptions to appropriate HTTP responses."
      - "Provide meaningful error messages for API consumers."
      - "Include error codes for programmatic error handling."
      - "Catch and handle specific exceptions rather than broad exception types."
      - "Log exceptions with appropriate context and stack traces."
      - "Ensure proper transaction rollback on errors."
      - "Validate input data before processing to catch errors early."
      - "Use error boundaries for critical operations."
      - "Return consistent error response structures across the API."

  - name: "Dependency Injection"
    description: "Ensure consistent dependency injection patterns."
    pattern: "**/api/deps.py"
    requirements:
      - "Create focused, single-responsibility dependencies."
      - "Chain dependencies for complex requirements."
      - "Use dependency overrides in tests."
      - "Document dependencies with clear docstrings."
      - "Handle dependency errors gracefully."
      - "Sequence validation properly in permission checking dependencies."
      - "Ensure entity existence checks happen before permission checks."
      - "Make dependencies reusable across endpoints."
      - "Avoid side effects in dependencies when possible."
      - "Properly propagate tenant context through dependency chain."

  - name: "Multi-tenancy"
    description: "Ensure proper multi-tenant implementation."
    pattern: "**/*.py"
    requirements:
      - "Always include tenant_id in queries for tenant-scoped resources."
      - "Validate tenant membership before operations on tenant resources."
      - "Propagate tenant context through service calls."
      - "Check user's tenant access before performing operations."
      - "Isolate data between tenants at the database query level."
      - "Include tenant context in logs and error messages."
      - "Test multi-tenant scenarios explicitly."
      - "Handle tenant not found scenarios appropriately."
      - "Implement proper tenant-scoped permissions."
      - "Ensure API keys respect tenant boundaries."

  - name: "Timezone Handling"
    description: "Ensure consistent timezone handling."
    pattern: "**/*.py"
    requirements:
      - "Store timestamps in UTC in the database."
      - "Use timezone-aware datetime objects consistently."
      - "Define DateTime fields with timezone=True in SQLAlchemy models."
      - "Handle timezone conversion explicitly when needed."
      - "Compare datetime objects in the same timezone."
      - "Include timezone info in serialized datetime fields."
      - "Refresh database objects to load server-generated timestamps."
      - "Test timezone logic with various timezone scenarios."
      - "Document timezone assumptions in relevant code."

  - name: "General Guidelines"
    description: "Enforce clean, maintainable, and secure coding practices."
    pattern: "**/*.py"
    requirements:
      - "Keep functions and methods small and focused."
      - "Use async/await for all I/O-bound operations."
      - "Write readable and maintainable code."
      - "Avoid code duplication by refactoring into reusable functions or classes."
      - "Prioritize security in all aspects of development."
      - "Follow SOLID principles for object-oriented code."
      - "Use meaningful variable and function names."
      - "Add comments for complex logic or non-obvious decisions."
      - "Use context managers for resource cleanup."
      - "Implement proper pagination for list endpoints."
      - "Validate input early in the request handling chain."
      - "Optimize database queries for performance."
      - "Document public APIs thoroughly."
      - "Write code for maintainability, not cleverness."

-ALWAYS ADD TODOs WHEN YOU EDIT THE CODE
-ALWAYS DOCUMENT EVERYTHING IN THE DOCS FOLDER
-ALWAYS CLEAN UP TEMP STUFF ONCE YOU DONT NEED IT ANYMORE
-WHEN FIXING BUGS, INCLUDE REGRESSION TESTS
-WHEN IMPLEMENTING NEW FEATURES, WRITE TESTS FIRST (TDD APPROACH)
-MAINTAIN AT LEAST 80% TEST COVERAGE
-ENSURE TRANSACTIONS ARE PROPERLY MANAGED WITH COMMITS AND ROLLBACKS
-EXPLICITLY REFRESH OBJECTS AFTER CREATION TO LOAD SERVER-GENERATED VALUES
-VERIFY TENANT ISOLATION IN ALL OPERATIONS AND TESTS
-SEQUENCE VALIDATION PROPERLY: ENTITY EXISTS → PERMISSION CHECK → BUSINESS LOGIC